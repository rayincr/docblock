/**
 * This is a DocBlock.
 */



/**
 * A summary informing the user what the associated element does.
 *
 * A *description*, that can span multiple lines, to go _in-depth_ into the details of this element
 * and to provide some background information or textual references.
 *
 * @param string $myArgument With a *description* of this argument, these may also
 *    span multiple lines.
 *
 * @return void
 */



/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */



/**
 * Short description for file
 *
 * Long description for file (if any)...
 *
 * PHP version 5
 *
 * LICENSE: This source file is subject to version 3.01 of the PHP license
 * that is available through the world-wide-web at the following URI:
 * http://www.php.net/license/3_01.txt.  If you did not receive a copy of
 * the PHP License and are unable to obtain it through the web, please
 * send a note to license@php.net so we can mail you a copy immediately.
 *
 * @category   CategoryName
 * @package    PackageName
 * @author     Original Author <author@example.com>
 * @author     Another Author <another@example.com>
 * @copyright  1997-2005 The PHP Group
 * @license    http://www.php.net/license/3_01.txt  PHP License 3.01
 * @version    SVN: $Id$
 * @link       http://pear.php.net/package/PackageName
 * @see        NetOther, Net_Sample::Net_Sample()
 * @since      File available since Release 1.2.0
 * @deprecated File deprecated in Release 2.0.0
 */



/**
 * This is a "Docblock Comment," also known as a "docblock."  The class'
 * docblock, below, contains a complete description of how to write these.
 */



/**
 * An example of how to write code to PEAR's standards
 *
 * Docblock comments start with "



/**" at the top.  Notice how the "/"
 * lines up with the normal indenting and the asterisks on subsequent rows
 * are in line with the first asterisk.  The last line of comment text
 * should be immediately followed on the next line by the closing asterisk
 * and slash and then the item you are commenting on should be on the next
 * line below that.  Don't add extra lines.  Please put a blank line
 * between paragraphs as well as between the end of the description and
 * the start of the @tags.  Wrap comments before 80 columns in order to
 * ease readability for a wide variety of users.
 *
 * Docblocks can only be used for programming constructs which allow them
 * (classes, properties, methods, defines, includes, globals).  See the
 * phpDocumentor documentation for more information.
 * http://phpdoc.org/docs/HTMLSmartyConverter/default/phpDocumentor/tutorial_phpDocumentor.howto.pkg.html
 *
 * The Javadoc Style Guide is an excellent resource for figuring out
 * how to say what needs to be said in docblock comments.  Much of what is
 * written here is a summary of what is found there, though there are some
 * cases where what's said here overrides what is said there.
 * http://java.sun.com/j2se/javadoc/writingdoccomments/index.html#styleguide
 *
 * The first line of any docblock is the summary.  Make them one short
 * sentence, without a period at the end.  Summaries for classes, properties
 * and constants should omit the subject and simply state the object,
 * because they are describing things rather than actions or behaviors.
 *
 * Below are the tags commonly used for classes. @category through @version
 * are required.  The remainder should only be used when necessary.
 * Please use them in the order they appear here.  phpDocumentor has
 * several other tags available, feel free to use them.
 *
 * @category   CategoryName
 * @package    PackageName
 * @author     Original Author <author@example.com>
 * @author     Another Author <another@example.com>
 * @copyright  1997-2005 The PHP Group
 * @license    http://www.php.net/license/3_01.txt  PHP License 3.01
 * @version    Release: @package_version@
 * @link       http://pear.php.net/package/PackageName
 * @see        NetOther, Net_Sample::Net_Sample()
 * @since      Class available since Release 1.2.0
 * @deprecated Class deprecated in Release 2.0.0
 */



/**
 * The status of foo's universe
 *
 * Potential values are 'good', 'fair', 'poor' and 'unknown'.
 *
 * @var string
 */



/**
 * The status of life
 *
 * Note that names of private properties or methods must be
 * preceeded by an underscore.
 *
 * @var bool
 * @access private
 */



/**
 * Registers the status of foo's universe
 *
 * Summaries for methods should use 3rd person declarative rather
 * than 2nd person imperative, beginning with a verb phrase.
 *
 * Summaries should add description beyond the method's name. The
 * best method names are "self-documenting", meaning they tell you
 * basically what the method does.  If the summary merely repeats
 * the method name in sentence form, it is not providing more
 * information.
 *
 * Summary Examples:
 *   + Sets the label              (preferred)
 *   + Set the label               (avoid)
 *   + This method sets the label  (avoid)
 *
 * Below are the tags commonly used for methods.  A @param tag is
 * required for each parameter the method has.  The @return
 * and @access tags are mandatory.  The @throws tag is required if
 * the method uses exceptions.  @static is required if the method can
 * be called statically.  The remainder should only be used when
 * necessary.  Please use them in the order they appear here.
 * phpDocumentor has several other tags available, feel free to use
 * them.
 *
 * The @param tag contains the data type, then the parameter's
 * name, followed by a description.  By convention, the first noun in
 * the description is the data type of the parameter.  Articles like
 * "a", "an", and  "the" can precede the noun.  The descriptions
 * should start with a phrase.  If further description is necessary,
 * follow with sentences.  Having two spaces between the name and the
 * description aids readability.
 *
 * When writing a phrase, do not capitalize and do not end with a
 * period:
 *   + the string to be tested
 *
 * When writing a phrase followed by a sentence, do not capitalize the
 * phrase, but end it with a period to distinguish it from the start
 * of the next sentence:
 *   + the string to be tested. Must use UTF-8 encoding.
 *
 * Return tags should contain the data type then a description of
 * the data returned.  The data type can be any of PHP's data types
 * (int, float, bool, string, array, object, resource, mixed)
 * and should contain the type primarily returned.  For example, if
 * a method returns an object when things work correctly but false
 * when an error happens, say 'object' rather than 'mixed.'  Use
 * 'void' if nothing is returned.
 *
 * Here's an example of how to format examples:
 * <code>
 * require_once 'Net/Sample.php';
 *
 * $s = new Net_Sample();
 * if (PEAR::isError($s)) {
 *     echo $s->getMessage() . "\n";
 * }
 * </code>
 *
 * Here is an example for non-php example or sample:
 * <samp>
 * pear install net_sample
 * </samp>
 *
 * @param string $arg1 the string to quote
 * @param int    $arg2 an integer of how many problems happened.
 *                     Indent to the description's starting point
 *                     for long ones.
 *
 * @return int the integer of the set mode used. FALSE if foo
 *             foo could not be set.
 * @throws exceptionclass [description]
 *
 * @access public
 * @static
 * @see Net_Sample::$foo, Net_Other::someMethod()
 * @since Method available since Release 1.2.0
 * @deprecated Method deprecated in Release 2.0.0
 */



/*
 * Local variables:
 * tab-width: 4
 * c-basic-offset: 4
 * c-hanging-comment-ender-p: nil
 * End:
 */



/**
 * Calculates sum of squares of an array
 *
 * Loops over each element in the array, squares it, and adds it to
 * total. Returns total.
 *
 * This function can also be implemented using array_reduce();
 *
 * @param array $arr
 * @return int
 * @throws Exception If element in array is not an integer
 */



/**
 * Here an example of the italics tag: <<i>>Hello, world!<<i>>
 */



/**
 * Example of using lists
 *
 * PhpDoc will parse this list correctly:
 * - Item #1
 * - Item #2
 * - Item #3
 *
 * But not this list:
 * - Item 1
 *   - Item 1.1
 *   - Item 1.2
 * - Item 2
 *
 * Use this instead for a nested list:
 * <ul>
 *   <li>Item 1</li>
 *   <ul>
 *     <li>Item 1.1</li>
 *     <li>Item 1.2</li>
 *   </ul>
 *   <li>Item 2</li>
 * </ul>
 */



/**
 * This is a file-level DocBlock
 *
 * @package Some_Package
 */



/**
 * This is a class-level DocBlock
 *
 * @package    Some_Package
 * @subpackage Other
 */



/**
 * This file contains common functions used throughout the application.
 *
 * @package    MyProject
 * @subpackage Common
 * @license    http://opensource.org/licenses/gpl-license.php  GNU Public License
 * @author     Moshe Teutsch <moteutsch@gmail.com>
 */



/**
 * An example class
 *
 * The class is empty for the sake of this example.
 *
 * @package    MyProject
 * @subpackage Common
 * @author     Moshe Teutsch <moteutsch@gmail.com>
 */



/**
 * Finds and returns user by ID or username
 *
 * @param int|string $user Either an ID or a username
 * @param PDO $pdo A valid PDO object
 * @return User Returns User object or null if not found
 */



/**
 * Copyright (c) 2017 Andreas MÃ¶ller.
 *
 * For the full copyright and license information, please view
 * the LICENSE file that was distributed with this source code.
 *
 * @see https://github.com/localheinz/test-util
 */



/**
 * Summary which must end with period or two line breaks.
 *
 * Optional longer description or discussion that may contain
 * inline tags and some html markup.  See the sections below for
 * more details on the possible tags and markup.  Separated by
 * blank lines, this is used in page-level DocBlocks and in
 * element-level DockBlocks when the element merits further discussion.
 * Section may contain markdown
 *
 * @since version number
 * @param <type> <name> <description>
 * @return <type> (What is being returned)
 */



/**
 * Test for uppercase.
 *
 * @since version 0.2
 * @param string $my_word text to be tested
 * @return bool false if not uppercase
 */



/**
 * Therapy group data template.
 *
 * @package   OpenEMR
 * @link      http://www.open-emr.org
 * @author    Rod Roark <rod@sunsetsystems.com>
 * @author    Brady Miller <brady.g.miller@gmail.com>
 * @author    Robert Down <robertdown@live.com>
 * @copyright Copyright (c) 2016 Rod Roark <rod@sunsetsystems.com>
 * @copyright Copyright (c) 2016 Brady Miller <brady.g.miller@gmail.com>
 * @copyright Copyright (c) 2017 Robert Down <robertdown@live.com>
 * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3
 */



/**
 * Check if a Sql row exists. (with two values)
 *
 * This function will check if a selected sql row exists that contains two
 * known values.
 *
 * @param  string  $tblname  Sql Table Name
 * @param  string  $colname  Sql Column Name 1
 * @param  string  $value    Sql value 1
 * @param  string  $colname2 Sql Column Name 2
 * @param  string  $value2   Sql value 2
 * @return boolean           returns true if the sql row does exist
 */



/**
 * inline tags demonstration
 *
 * This class generates bars using the main algorithm, which also
 * works heavily with {@link foo()} to rule the world. If I want
 * to use the characters "{@link" in a docblock, I just use "{@}link."  If
 * I want the characters "{@*}" I use "{@}*}"
 *
 * @author ahobbit
 * @copyright middleearth.org XVII
 * @version 1.2.3
 */



/**
 * Makes chocolate bars
 *
 * There are two aspects to this class.
 * {@inheritdoc }  In addition, the foo class
 * makes the bars chocolate
 */



/**
 * Base class for all output converters.
 *
 * The Converter marks the final stage in phpDocumentor.  phpDocumentor works
 * in this order:
 *
 * <pre>Parsing => Intermediate Parsing organization => Conversion to output</pre>
 *
 * A Converter takes output from the {@link phpDocumentor_IntermediateParser} and
 * converts it to output.  With version 1.2, phpDocumentor includes a variety
 * of output converters:
 * <ul>
 *  <li>{@link HTMLframesConverter}</li>
 *  <li>{@link HTMLSmartyConverter}</li>
 *  <li>{@link PDFdefaultConverter}</li>
 *  <li>{@link CHMdefaultConverter}</li>
 *  <li>{@link CSVdia2codeConverter}</li>
 *  <li>{@link XMLDocBookConverter}</li>
 * </ul>
 * {@internal
 * The converter takes output directly from {@link phpDocumentor_IntermediateParser}
 * and using {@link walk()} or {@link walk_everything} (depending on the value of
 * {@link $sort_absolutely_everything}) it "walks" over an array of phpDocumentor elements.}}
 *
 * @package Converters
 * @abstract
 * @author Greg Beaver <notaddress@nothere.nte>
 * @since 1.0rc1
 * @version $Id: Converter.inc 291278 2009-11-24 17:43:20Z ashnazg $
 */



/**#@+
 * @access private
 * @var string
 */



/**
 * Example_Class is a sample class for demonstrating PHPDoc
 *
 * Example_Class is a class that has no real actual code, but merely
 * exists to help provide people with an understanding as to how the
 * various PHPDoc tags are used.
 *
 * Example usage:
 * if (Example_Class::example()) {
 *    print "I am an example.";
 * }
 *
 * @package  Example
 * @author   David Sklar <david@example.com>
 * @author   Adam Trachtenberg <adam@example.com>
 * @version  $Revision: 1.3 $
 * @access   public
 * @see      http://www.example.com/pear
 */



/**
 *
 */



/**
 * Defies imagination, extends boundaries and saves the world ...all before breakfast!
 */



/**
 * return the date of Easter
 *
 * Using the formula from "Formulas that are way too complicated for anyone to
 * ever understand except for me" by Irwin Nerdy, this function calculates the
 * date of Easter given a date in the Ancient Mayan Calendar, if you can also
 * guess the birthday of the author.
 */



/**
 * The short description
 *
 * As many lines of extendend description as you want {@link element} links to an element
 * {@link http://www.example.com Example hyperlink inline link} links to a website
 * Below this goes the tags to further describe element you are documenting
 *
 * @param  	type	$varname	description
 * @return 	type	description
 * @access 	public or private
 * @author 	author name
 * @copyright	name date
 * @version	version
 * @see		name of another element that can be documented, produces a link to it in the documentation
 * @link		a url
 * @since  	a version or a date
 * @deprecated	description
 * @deprec	alias for deprecated
 * @magic	phpdoc.de compatibility
 * @todo		phpdoc.de compatibility
 * @exception	Javadoc-compatible, use as needed
 * @throws  	Javadoc-compatible, use as needed
 * @var		type	a data type for a class variable
 * @package	package name
 * @subpackage	sub package name, groupings inside of a project
 */



/**
 * return the day of the week
 *
 * @param string $month 3-letter Month abbreviation
 * @param integer $day day of the month
 * @param integer $year year
 * @return integer 0 = Sunday, value returned is from 0 (Sunday) to 6 (Saturday)
 */



/**
 * class 1
 *
 * example of {@link http://phpdocu.sourceforge.net Inline linking to a website}
 * example of use of the :: scope operator
 * @see subclass::method()
 */



/**
 * example of linking to same class, outputs "function main_class::parent_method()
 * @see function parent_method
 */



/**
 * subclass inherits this method.
 * example of a word which is either a constant or class name, in this case a classname
 * @see subclass
 * @see subclass::$foo
 */



/**
 * this class extends main_class
 * @see main_class
 */



/**
 * bar.
 * example of same class lookup - see will look through parent hierarchy to find the method in {@link main_class}
 * the above inline link tag will parse as main_class
 * @see parent_method()
 */
var $foo = 9;
}



/**
 * class 1
 *
 * example of {@link http://phpdocu.sourceforge.net}
 * displays as "example of http://phpdocu.sourceforge.net"
 */



/**
 * This function sends the user to {@link http://www.sf.net The SourceForge Website}
 * displays as "This function send the user to The SourceForge Website"
 */



/**
 * this class extends {@link main_class}
 * displays as "this class extends main_class"
 */



/**
 * bar.
 * this class inherits {@link main_class::goto_sourceforge()}
 */



/**
 * Page-level DocBlock
 *
 * This procedural page contains many functions that blah blah blah
 */



/**
 * function or define DocBlock
 */



/**
 * Almost a Page-level DocBlock
 *
 * This procedural page contains many functions that blah blah blah
 */



/**
 * function or define DocBlock
 */



/**
 * DocBlock will document function blah()
 */



/**
 * A sample class
 *
 * This class is just random php used as a {@link http://phpdocu.sourceforge.net phpdoc} example
 *
 * @version 1.0
 * @author Joshua Eichorn <jeichorn@phpdoc.org>
 * @project test
 */



/**
 * A sample class variable
 * @access private
 * @var string
 */



/**
 * The class constructor
 *
 * This sets up the class and does other random stuff
 */



/**
 * A test function
 *
 * This function returns {@link $sample}
 *
 * @see set(), $sample
 * @return string
 */



/**
 * Set the sample var
 *
 * @param string $var
 * @see phptestclass::$sample, phptestclass::test()
 */
